{"pages":[{"title":"categories","text":"","link":"/categories/index.html"},{"title":"tags","text":"","link":"/tags/index.html"}],"posts":[{"title":"位运算","text":"搞完了论文了，无事可做，就重新刷刷leetcode吧，从每日一题开始。不是第一次刷leetcode了，尽量做每日一题的时候把相关的题型总结一下。 今天每日一题为交替位二进制数。普通方法模拟过程即可。复习一下位运算中常见的小技巧： 1234567int num;//取最后一位num&amp;1;//把最后一个1变成0num&amp;(num-1);//仅保留最后一个1num&amp;(-num); num&amp;(~num+1); 此题还可以通过规律来进行处理。 位运算问题中还有一类模拟问题，即利用位运算来对字符串进行处理，多用于只有小写字母的问题并且字符串中字母不考虑顺序。将字符串转化位二进制数。 比如最大单词长度乘积。 还有更复杂的一种用法，位运算+状态压缩，比如猜字谜。 其中用到了位运算技巧为： 123456//检查 a 的第 b 位是否为 1,两种可能，0或1。a&gt;&gt;b&amp;1;//将 a 的第 b 位设置为 1(b位为0时适用)a+=1&lt;&lt;b;//上述两个操作可以合并为一个a|=1&lt;&lt;b; 这两个操作在位运算中出现频率极高。适用于问题状态空间大，但是原字符串长度较短（一般小于10）","link":"/2022/03/26/%E4%BD%8D%E8%BF%90%E7%AE%97/"},{"title":"滑动窗口","text":"今天的每日一题，考试的最大困扰度。属于滑动窗口类型的题目。 滑动窗口的概念始于TCP，在算法中指一类计算过程与两端点表示的区间相关的问题，滑动窗口一定是同向移动的。其大小一般是固定的，但是也有可能会对其大小进行修改。 滑动窗口最常用的求解方法是双指针。双指针是一种解决办法，通过固定一个边界并改变另一个边界来不断逼近约束要求，本质上是一种二分查找。 滑动窗口题目问法一般下面几种： 给两个字符串或者数组，一长一短，问其中短的是否在长的种满足一定条 件存在。 比如求长的最短字串，该字串必须涵盖短的所有字符串。 短的字符串在长的中出现的所有位置 或者给一个字符串或数组，问这个字符串的子串或者子数组是否满足一定的条件 比如含有少于K个不用字符的最长子串 所有字符都只出现一次的最长子串 滑动窗口问题的通用求解思路： 123456789int i = 0;int j = 0;while(i&lt;j){ j++; while(){ i++; } ans = Math.max(ans,j-i+1);} 滑动窗口可分为两类：窗口固定的和窗口变化的。 固定窗口的题目核心为维护一个长度固定的滑动窗口，当滑动窗口的长度大于固定值时，右移left指针(尤其要注意右移的条件！不仅仅和滑动窗口长度有关)。 找到字符串中所有字母异位词 可变窗口 可变窗口的问题和不可变类似，区别是left指针移动时，不需要考虑滑动窗口的长度，仅需从问题本身的限制出发。 无重复字符的最长子串 此类题目还有更改k个字符，求其最长不重复和最长重复的问题，依然可以将其归于可变窗口问题，更改k个字符即为其限制条件。","link":"/2022/03/31/%E6%BB%91%E5%8A%A8%E7%AA%97%E5%8F%A3/"},{"title":"数据结构应用","text":"今日每日一题找到处理请求最多的服务器 每个任务有对应的开始时间和持续时间，容易想到使用优先队列。 根据任务分配规则，容易想到红黑树（TreeSet） 对于给定开始时间和工作时间的任务这一类题，经常使用优先队列。待后续总结。","link":"/2022/03/31/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%BA%94%E7%94%A8/"}],"tags":[{"name":"位运算","slug":"位运算","link":"/tags/%E4%BD%8D%E8%BF%90%E7%AE%97/"},{"name":"滑动窗口","slug":"滑动窗口","link":"/tags/%E6%BB%91%E5%8A%A8%E7%AA%97%E5%8F%A3/"},{"name":"优先队列","slug":"优先队列","link":"/tags/%E4%BC%98%E5%85%88%E9%98%9F%E5%88%97/"},{"name":"红黑树","slug":"红黑树","link":"/tags/%E7%BA%A2%E9%BB%91%E6%A0%91/"}],"categories":[{"name":"算法","slug":"算法","link":"/categories/%E7%AE%97%E6%B3%95/"}]}