{"pages":[{"title":"tags","text":"","link":"/tags/index.html"},{"title":"categories","text":"","link":"/categories/index.html"}],"posts":[{"title":"stream和lambda","text":"今天问leader入职前需要学些什么，说到了lambda。之前我其实是学过的，但是平时用的太少了，早忘完了-。- 函数式编程思想lambda和stream共同构成了java中的函数式编程，java本身是面向对象的，其功能都是通过对象实现，而在函数式编程中，不在关注是什么对象，而是更加关注对数据进行了什么操作。 优点如下： 代码简洁 接近自然语言，易于理解 易于“并发编程” lambdalambda其实算是java8中引入的语法糖。可以对某些匿名内部类进行简化。是函数式编程的一个重要体现。 形式为 1()-&gt;{} 左边为参数列表，右边为对应方法的实现。 最常用的两处，一是多线程，二是comparator比较器 123456789101112131415161718192021//多线程的匿名内部类写法new Thread(new Runnable(){ public void run(){ System.out.println(&quot;线程启动啦！&quot;); }}).start();//使用lambda简化后。new Thread(()-&gt;{ System.out.println(&quot;线程启动啦！&quot;);}).start();//使用匿名内部类的比较器写法Arrays.sort(nums,new Comparator&lt;Integer&gt;(){ public int compare(Integer t1,Integer t2){ return t1.compareTo(t2); }});//使用lambda简化后 Arrays.sort(nums,(t1,t2)-&gt;{ return t1.compareTo(t2); }); 省略规则： 参数类型可以省略 方法体只有一句代码时，大括号和return和分号可以省略。 方法体只有一个参数，小括号可以省略。 Stream流java8的stream使用的时函数式编程模式，如同它的名字一样，它可以被用来对集合或数组进行链状流式的操作。 下面介绍流的操作： 创建流 单列集合 1集合对象.stream(); 数组 12Arrays.stream(数组) Stream.of(数组) 双列集合 123//转换成单列集合后在创建 Stream&lt;Map.Entry&lt;String,String&gt;&gt; stream = map.entrySet().stream()//也可以转换为keySet 中间操作 filter 对流中的元素进行过滤，符合过滤条件的才留在流中。 map 可以把对流中的元素进行计算或者转换。 distinct 去除流中重复元素。 flatMap map只能把一个对象转换成另一个对象来作为流中的元素。而flatMap可以把一个对象转换成多个对象作为流中的元素。（比如流中元素是list等，则可以使用flatMap将所有list中的所有元素都转换到一个流中）。 sorted 对流进行排序，可以传入比较器自定义排序。 limit 设置流最大长度，超出的部分将被抛弃。 skip 跳过流中前n个元素。 终结操作 forEach 对流中元素进行遍历，通过传入参数来指定具体操作。 count 获取元素个数。 min&amp;max 获取流中的最值。 collect 把当前流转换为一个集合。接受一个collector接口，一般使用Collectors工具类提供的方法，比如Collectors.toList()，Collectors.toMap(Function，Function)。 anyMatch 判断是否有任意符合条件的元素。 allMatch reduce 归并，对流中的数据按照你制定的计算方式计算出一个结果。 有三种构造方法 123456//第一种reduce(identity,Operator) 指定初始值，然后对每个元素进行制定操作。//第二种，max&amp;min 底层实现reduce(Oparator) 不指定初始值，从第一个元素开始，进行指定操作。//第三种()reduce() //后续再介绍，涉及到并行流。 Stream 注意事项： 惰性求值，没有终结操作，则中间操作不执行。 流式一次性的。 不会影响原数据。 Optionaljava8中出现的，可以有效避免空指针异常。 Optional创建对象一般使用Optional的静态方法ofNullable，无论传入参数是否为null都不会出现问题。 但是实际中，可以把dao层的方法返回值定位Optional类型。 还有两种方法，如果确定不为空，可以使用Optional.of() 确定为空，可以使用Optional.empty() 消费值1ifPresent();//不为空才执行指定的操作。 获取值12orElseGet()//不为空则获取到数据，为空则返回指定默认值。orElseThrow()//不为空则获取数据，为空则创建异常抛出。 方法引用使用lambda时，如果方法体中只有一个方法的调用，我们可以用方法引用来进一步简化代码。 1234对象:: 实例方法名类::静态方法名类::实例方法名 类::new 并行流两种方式创建 12list.stream().parallel();list.parallelStream(); 底层为forkjoin框架，后续待补充。","link":"/2022/04/11/stream%E5%92%8Clambda/"},{"title":"二分查找","text":"二分查找作为一种非常基础和重要的算法，有着多种变种和广泛的应用。 完全有序的问题 不完全有序的问题（旋转问题）就是利用二段性 有重复元素时要考虑去重 考虑最后返回值时，可以带入left==right的情况。 二分+dp方法也常见。 参考的是leetcode上一篇二分的总结","link":"/2022/04/07/%E4%BA%8C%E5%88%86%E6%9F%A5%E6%89%BE/"},{"title":"位运算","text":"搞完了论文了，无事可做，就重新刷刷leetcode吧，从每日一题开始。不是第一次刷leetcode了，尽量做每日一题的时候把相关的题型总结一下。 今天每日一题为交替位二进制数。普通方法模拟过程即可。复习一下位运算中常见的小技巧： 1234567int num;//取最后一位num&amp;1;//把最后一个1变成0num&amp;(num-1);//仅保留最后一个1num&amp;(-num); num&amp;(~num+1); 此题还可以通过规律来进行处理。 位运算问题中还有一类模拟问题，即利用位运算来对字符串进行处理，多用于只有小写字母的问题并且字符串中字母不考虑顺序。将字符串转化位二进制数。 比如最大单词长度乘积。 还有更复杂的一种用法，位运算+状态压缩，比如猜字谜。 其中用到了位运算技巧为： 123456//检查 a 的第 b 位是否为 1,两种可能，0或1。a&gt;&gt;b&amp;1;//将 a 的第 b 位设置为 1(b位为0时适用)a+=1&lt;&lt;b;//上述两个操作可以合并为一个a|=1&lt;&lt;b; 这两个操作在位运算中出现频率极高。适用于问题状态空间大，但是原字符串长度较短（一般小于10）","link":"/2022/03/26/%E4%BD%8D%E8%BF%90%E7%AE%97/"},{"title":"区间计算相关","text":"区间和是leetcode中很常见的一类题目。大致可分为 1.数组不变，求区间和：「前缀和」、「树状数组」、「线段树」2.多次修改某个数（单点），求区间和：「树状数组」、「线段树」3.多次修改某个区间，输出最终结果：「差分」4.多次修改某个区间，求区间和：「线段树」、「树状数组」（看修改区间范围大小）5.多次将某个区间变成同一个数，求区间和：「线段树」、「树状数组」（看修改区间范围大小） 首先分别介绍各种方法： 树形数组区域和检索-数组可修改 树形数组就是把数组摆成树的形状 最终要的为某元素的父结点为该结点加上此结点的二进制截出最后一位的1 1234//向后更新i = i+lowbit(i)//向前求和i= i-lowbit(i) 由此而来的更新和求和： 12345678void add(int x, int u) { for (int i = x; i &lt;= n; i += lowbit(i)) tr[i] += u; }int query(int x) { int ans = 0; for (int i = x; i &gt; 0; i -= lowbit(i)) ans += tr[i]; return ans; } 前缀和差分12//差分数组d[i] = arr[i]-arr[i-1]","link":"/2022/04/07/%E5%8C%BA%E9%97%B4%E8%AE%A1%E7%AE%97%E7%9B%B8%E5%85%B3/"},{"title":"数据结构应用","text":"今日每日一题找到处理请求最多的服务器 每个任务有对应的开始时间和持续时间，容易想到使用优先队列。 根据任务分配规则，容易想到红黑树（TreeSet） 对于给定开始时间和工作时间的任务这一类题，经常使用优先队列。待后续总结。","link":"/2022/03/31/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%BA%94%E7%94%A8/"},{"title":"滑动窗口","text":"今天的每日一题，考试的最大困扰度。属于滑动窗口类型的题目。 滑动窗口的概念始于TCP，在算法中指一类计算过程与两端点表示的区间相关的问题，滑动窗口一定是同向移动的。其大小一般是固定的，但是也有可能会对其大小进行修改。 滑动窗口最常用的求解方法是双指针。双指针是一种解决办法，通过固定一个边界并改变另一个边界来不断逼近约束要求，本质上是一种二分查找。 滑动窗口题目问法一般下面几种： 给两个字符串或者数组，一长一短，问其中短的是否在长的种满足一定条 件存在。 比如求长的最短字串，该字串必须涵盖短的所有字符串。 短的字符串在长的中出现的所有位置 或者给一个字符串或数组，问这个字符串的子串或者子数组是否满足一定的条件 比如含有少于K个不用字符的最长子串 所有字符都只出现一次的最长子串 滑动窗口问题的通用求解思路： 123456789int i = 0;int j = 0;while(i&lt;j){ j++; while(){ i++; } ans = Math.max(ans,j-i+1);} 滑动窗口可分为两类：窗口固定的和窗口变化的。 固定窗口的题目核心为维护一个长度固定的滑动窗口，当滑动窗口的长度大于固定值时，右移left指针(尤其要注意右移的条件！不仅仅和滑动窗口长度有关)。 找到字符串中所有字母异位词 可变窗口 可变窗口的问题和不可变类似，区别是left指针移动时，不需要考虑滑动窗口的长度，仅需从问题本身的限制出发。 无重复字符的最长子串 此类题目还有更改k个字符，求其最长不重复和最长重复的问题，依然可以将其归于可变窗口问题，更改k个字符即为其限制条件。","link":"/2022/03/31/%E6%BB%91%E5%8A%A8%E7%AA%97%E5%8F%A3/"},{"title":"最小高度树","text":"最小高度树 这题的初始思路为遍历所有节点，将其置为根，分别进行bfs求起高度。但这样复杂度太高。为此想到了多源BFS，即从多个起点同时BFS，从而想到了拓扑排序。 拓扑排序拓扑排序一般用于有向图或者无向图中判别是否有环。 具体流程为先统计所有节点的入度（度），将入度（度）为0（1）的节点分离出来。再将这些节点指向的节点的入度（度）减一。直到所有节点都分离出来。 如果最后不存在入度为0的节点，则说明有环。 由此可以得到思路如下图，每次都将叶子节点剪去，最后必能得到最矮的树。 这里说一下拓扑排序的大概流程。拓扑排序一般是出现在图的问题中的，因此需要先对图进行处理，得到图的临界表，即 1List&lt;List&lt;Node&gt;&gt; adj 来记录节点间的连接关系。同时还需要两个数组，出度数组和入度数组，方便找到出度为0的子节点。 12int[] indegree；int[] outdegree; 接下来便是进行BFS。找到出度为0的节点，剪去，同时将连接的节点的出度也减一，再次寻找出度为0的节点，重复这个过程。 树形DP树形DP是在树上使用动态规划。 这道题要求使得高度最小的树，一个直接的想法自然是尝试把每个点作为根节点，求出此时的树的高度，求出树的高度可以通过深度（广度）优先搜索解决。 在该题给定的数据下会超时，因此需要优化。 观察可以发现，在一轮深度优先搜索中，其实不仅得到了以当前节点为根的树的高度，还得到了以每个节点为根的子树的高度，这些高度信息没有用到，被浪费掉了，换根动态规划的思路就是利用这些信息来快速的计算出以其他节点为根时的树高。 同样的换根DP题 树中距离之和 很好的讲解 流程类似 两个dfs，第一次dfs是获取树的信息，第二次则是根据已有的信息进行换根。","link":"/2022/04/08/%E6%9C%80%E5%B0%8F%E9%AB%98%E5%BA%A6%E6%A0%91/"}],"tags":[{"name":"lambda","slug":"lambda","link":"/tags/lambda/"},{"name":"stream","slug":"stream","link":"/tags/stream/"},{"name":"二分查找","slug":"二分查找","link":"/tags/%E4%BA%8C%E5%88%86%E6%9F%A5%E6%89%BE/"},{"name":"位运算","slug":"位运算","link":"/tags/%E4%BD%8D%E8%BF%90%E7%AE%97/"},{"name":"前缀数组","slug":"前缀数组","link":"/tags/%E5%89%8D%E7%BC%80%E6%95%B0%E7%BB%84/"},{"name":"差分","slug":"差分","link":"/tags/%E5%B7%AE%E5%88%86/"},{"name":"树状数组","slug":"树状数组","link":"/tags/%E6%A0%91%E7%8A%B6%E6%95%B0%E7%BB%84/"},{"name":"优先队列","slug":"优先队列","link":"/tags/%E4%BC%98%E5%85%88%E9%98%9F%E5%88%97/"},{"name":"红黑树","slug":"红黑树","link":"/tags/%E7%BA%A2%E9%BB%91%E6%A0%91/"},{"name":"滑动窗口","slug":"滑动窗口","link":"/tags/%E6%BB%91%E5%8A%A8%E7%AA%97%E5%8F%A3/"},{"name":"拓扑排序","slug":"拓扑排序","link":"/tags/%E6%8B%93%E6%89%91%E6%8E%92%E5%BA%8F/"},{"name":"树形dp","slug":"树形dp","link":"/tags/%E6%A0%91%E5%BD%A2dp/"}],"categories":[{"name":"java","slug":"java","link":"/categories/java/"},{"name":"算法","slug":"算法","link":"/categories/%E7%AE%97%E6%B3%95/"}]}